package com.whatime.db;

import java.util.List;
import com.whatime.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ALARM.
 */
public class Alarm {

    private Long id;
    private String uuid;
    private Long alarmTime;
    private Long cateId;
    private String cateUuid;
    private Long createTime;
    private String des;
    private Long endTime;
    private Integer froms;
    private Boolean del;
    private Boolean endJoin;
    private Boolean open;
    private Long joinNum;
    private String linkman;
    private Long maxJoinNum;
    private String scope;
    private String share;
    private Long syncTime;
    private Long taskId;
    private String taskUuid;
    private String title;
    private Integer type;
    private Long uptTime;
    private String userUuid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AlarmDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private Task task;
    private Long task__resolvedKey;

    private List<Task> tasks;

    public Alarm() {
    }

    public Alarm(Long id) {
        this.id = id;
    }

    public Alarm(Long id, String uuid, Long alarmTime, Long cateId, String cateUuid, Long createTime, String des, Long endTime, Integer froms, Boolean del, Boolean endJoin, Boolean open, Long joinNum, String linkman, Long maxJoinNum, String scope, String share, Long syncTime, Long taskId, String taskUuid, String title, Integer type, Long uptTime, String userUuid) {
        this.id = id;
        this.uuid = uuid;
        this.alarmTime = alarmTime;
        this.cateId = cateId;
        this.cateUuid = cateUuid;
        this.createTime = createTime;
        this.des = des;
        this.endTime = endTime;
        this.froms = froms;
        this.del = del;
        this.endJoin = endJoin;
        this.open = open;
        this.joinNum = joinNum;
        this.linkman = linkman;
        this.maxJoinNum = maxJoinNum;
        this.scope = scope;
        this.share = share;
        this.syncTime = syncTime;
        this.taskId = taskId;
        this.taskUuid = taskUuid;
        this.title = title;
        this.type = type;
        this.uptTime = uptTime;
        this.userUuid = userUuid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlarmDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public Long getAlarmTime() {
        return alarmTime;
    }

    public void setAlarmTime(Long alarmTime) {
        this.alarmTime = alarmTime;
    }

    public Long getCateId() {
        return cateId;
    }

    public void setCateId(Long cateId) {
        this.cateId = cateId;
    }

    public String getCateUuid() {
        return cateUuid;
    }

    public void setCateUuid(String cateUuid) {
        this.cateUuid = cateUuid;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public String getDes() {
        return des;
    }

    public void setDes(String des) {
        this.des = des;
    }

    public Long getEndTime() {
        return endTime;
    }

    public void setEndTime(Long endTime) {
        this.endTime = endTime;
    }

    public Integer getFroms() {
        return froms;
    }

    public void setFroms(Integer froms) {
        this.froms = froms;
    }

    public Boolean getDel() {
        return del;
    }

    public void setDel(Boolean del) {
        this.del = del;
    }

    public Boolean getEndJoin() {
        return endJoin;
    }

    public void setEndJoin(Boolean endJoin) {
        this.endJoin = endJoin;
    }

    public Boolean getOpen() {
        return open;
    }

    public void setOpen(Boolean open) {
        this.open = open;
    }

    public Long getJoinNum() {
        return joinNum;
    }

    public void setJoinNum(Long joinNum) {
        this.joinNum = joinNum;
    }

    public String getLinkman() {
        return linkman;
    }

    public void setLinkman(String linkman) {
        this.linkman = linkman;
    }

    public Long getMaxJoinNum() {
        return maxJoinNum;
    }

    public void setMaxJoinNum(Long maxJoinNum) {
        this.maxJoinNum = maxJoinNum;
    }

    public String getScope() {
        return scope;
    }

    public void setScope(String scope) {
        this.scope = scope;
    }

    public String getShare() {
        return share;
    }

    public void setShare(String share) {
        this.share = share;
    }

    public Long getSyncTime() {
        return syncTime;
    }

    public void setSyncTime(Long syncTime) {
        this.syncTime = syncTime;
    }

    public Long getTaskId() {
        return taskId;
    }

    public void setTaskId(Long taskId) {
        this.taskId = taskId;
    }

    public String getTaskUuid() {
        return taskUuid;
    }

    public void setTaskUuid(String taskUuid) {
        this.taskUuid = taskUuid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Long getUptTime() {
        return uptTime;
    }

    public void setUptTime(Long uptTime) {
        this.uptTime = uptTime;
    }

    public String getUserUuid() {
        return userUuid;
    }

    public void setUserUuid(String userUuid) {
        this.userUuid = userUuid;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.cateId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            cateId = category == null ? null : category.getId();
            category__resolvedKey = cateId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Task getTask() {
        Long __key = this.taskId;
        if (task__resolvedKey == null || !task__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            Task taskNew = targetDao.load(__key);
            synchronized (this) {
                task = taskNew;
            	task__resolvedKey = __key;
            }
        }
        return task;
    }

    public void setTask(Task task) {
        synchronized (this) {
            this.task = task;
            taskId = task == null ? null : task.getId();
            task__resolvedKey = taskId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Task> getTasks() {
        if (tasks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TaskDao targetDao = daoSession.getTaskDao();
            List<Task> tasksNew = targetDao._queryAlarm_Tasks(id);
            synchronized (this) {
                if(tasks == null) {
                    tasks = tasksNew;
                }
            }
        }
        return tasks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTasks() {
        tasks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
