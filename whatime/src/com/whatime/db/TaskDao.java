package com.whatime.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.whatime.db.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK.
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property AlarmId = new Property(2, Long.class, "alarmId", false, "ALARM_ID");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property AlarmTime = new Property(4, Long.class, "alarmTime", false, "ALARM_TIME");
        public final static Property AlarmUuid = new Property(5, String.class, "alarmUuid", false, "ALARM_UUID");
        public final static Property BackgroundUri = new Property(6, String.class, "backgroundUri", false, "BACKGROUND_URI");
        public final static Property ClockType = new Property(7, Integer.class, "clockType", false, "CLOCK_TYPE");
        public final static Property CreateTime = new Property(8, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property SetTime = new Property(9, Long.class, "setTime", false, "SET_TIME");
        public final static Property AdvanceOrder = new Property(10, Integer.class, "advanceOrder", false, "ADVANCE_ORDER");
        public final static Property Des = new Property(11, String.class, "des", false, "DES");
        public final static Property GpsAddress = new Property(12, String.class, "gpsAddress", false, "GPS_ADDRESS");
        public final static Property Del = new Property(13, Boolean.class, "del", false, "DEL");
        public final static Property Open = new Property(14, Boolean.class, "open", false, "OPEN");
        public final static Property Music = new Property(15, String.class, "music", false, "MUSIC");
        public final static Property Notice = new Property(16, String.class, "notice", false, "NOTICE");
        public final static Property PlayMinute = new Property(17, Integer.class, "playMinute", false, "PLAY_MINUTE");
        public final static Property PlayMusic = new Property(18, String.class, "playMusic", false, "PLAY_MUSIC");
        public final static Property PlayType = new Property(19, Integer.class, "playType", false, "PLAY_TYPE");
        public final static Property RepeatInfo = new Property(20, String.class, "repeatInfo", false, "REPEAT_INFO");
        public final static Property RepeatType = new Property(21, Integer.class, "repeatType", false, "REPEAT_TYPE");
        public final static Property Shake = new Property(22, Boolean.class, "shake", false, "SHAKE");
        public final static Property Skip = new Property(23, Boolean.class, "skip", false, "SKIP");
        public final static Property Surpervise = new Property(24, String.class, "surpervise", false, "SURPERVISE");
        public final static Property SyncTime = new Property(25, Long.class, "syncTime", false, "SYNC_TIME");
        public final static Property Title = new Property(26, String.class, "title", false, "TITLE");
        public final static Property UptTime = new Property(27, Long.class, "uptTime", false, "UPT_TIME");
    };

    private DaoSession daoSession;

    private Query<Task> alarm_TasksQuery;

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UUID' TEXT," + // 1: uuid
                "'ALARM_ID' INTEGER," + // 2: alarmId
                "'ADDRESS' TEXT," + // 3: address
                "'ALARM_TIME' INTEGER," + // 4: alarmTime
                "'ALARM_UUID' TEXT," + // 5: alarmUuid
                "'BACKGROUND_URI' TEXT," + // 6: backgroundUri
                "'CLOCK_TYPE' INTEGER," + // 7: clockType
                "'CREATE_TIME' INTEGER," + // 8: createTime
                "'SET_TIME' INTEGER," + // 9: setTime
                "'ADVANCE_ORDER' INTEGER," + // 10: advanceOrder
                "'DES' TEXT," + // 11: des
                "'GPS_ADDRESS' TEXT," + // 12: gpsAddress
                "'DEL' INTEGER," + // 13: del
                "'OPEN' INTEGER," + // 14: open
                "'MUSIC' TEXT," + // 15: music
                "'NOTICE' TEXT," + // 16: notice
                "'PLAY_MINUTE' INTEGER," + // 17: playMinute
                "'PLAY_MUSIC' TEXT," + // 18: playMusic
                "'PLAY_TYPE' INTEGER," + // 19: playType
                "'REPEAT_INFO' TEXT," + // 20: repeatInfo
                "'REPEAT_TYPE' INTEGER," + // 21: repeatType
                "'SHAKE' INTEGER," + // 22: shake
                "'SKIP' INTEGER," + // 23: skip
                "'SURPERVISE' TEXT," + // 24: surpervise
                "'SYNC_TIME' INTEGER," + // 25: syncTime
                "'TITLE' TEXT," + // 26: title
                "'UPT_TIME' INTEGER);"); // 27: uptTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        Long alarmId = entity.getAlarmId();
        if (alarmId != null) {
            stmt.bindLong(3, alarmId);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
 
        Long alarmTime = entity.getAlarmTime();
        if (alarmTime != null) {
            stmt.bindLong(5, alarmTime);
        }
 
        String alarmUuid = entity.getAlarmUuid();
        if (alarmUuid != null) {
            stmt.bindString(6, alarmUuid);
        }
 
        String backgroundUri = entity.getBackgroundUri();
        if (backgroundUri != null) {
            stmt.bindString(7, backgroundUri);
        }
 
        Integer clockType = entity.getClockType();
        if (clockType != null) {
            stmt.bindLong(8, clockType);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime);
        }
 
        Long setTime = entity.getSetTime();
        if (setTime != null) {
            stmt.bindLong(10, setTime);
        }
 
        Integer advanceOrder = entity.getAdvanceOrder();
        if (advanceOrder != null) {
            stmt.bindLong(11, advanceOrder);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(12, des);
        }
 
        String gpsAddress = entity.getGpsAddress();
        if (gpsAddress != null) {
            stmt.bindString(13, gpsAddress);
        }
 
        Boolean del = entity.getDel();
        if (del != null) {
            stmt.bindLong(14, del ? 1l: 0l);
        }
 
        Boolean open = entity.getOpen();
        if (open != null) {
            stmt.bindLong(15, open ? 1l: 0l);
        }
 
        String music = entity.getMusic();
        if (music != null) {
            stmt.bindString(16, music);
        }
 
        String notice = entity.getNotice();
        if (notice != null) {
            stmt.bindString(17, notice);
        }
 
        Integer playMinute = entity.getPlayMinute();
        if (playMinute != null) {
            stmt.bindLong(18, playMinute);
        }
 
        String playMusic = entity.getPlayMusic();
        if (playMusic != null) {
            stmt.bindString(19, playMusic);
        }
 
        Integer playType = entity.getPlayType();
        if (playType != null) {
            stmt.bindLong(20, playType);
        }
 
        String repeatInfo = entity.getRepeatInfo();
        if (repeatInfo != null) {
            stmt.bindString(21, repeatInfo);
        }
 
        Integer repeatType = entity.getRepeatType();
        if (repeatType != null) {
            stmt.bindLong(22, repeatType);
        }
 
        Boolean shake = entity.getShake();
        if (shake != null) {
            stmt.bindLong(23, shake ? 1l: 0l);
        }
 
        Boolean skip = entity.getSkip();
        if (skip != null) {
            stmt.bindLong(24, skip ? 1l: 0l);
        }
 
        String surpervise = entity.getSurpervise();
        if (surpervise != null) {
            stmt.bindString(25, surpervise);
        }
 
        Long syncTime = entity.getSyncTime();
        if (syncTime != null) {
            stmt.bindLong(26, syncTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(27, title);
        }
 
        Long uptTime = entity.getUptTime();
        if (uptTime != null) {
            stmt.bindLong(28, uptTime);
        }
    }

    @Override
    protected void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // alarmId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // alarmTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // alarmUuid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // backgroundUri
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // clockType
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // createTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // setTime
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // advanceOrder
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // des
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // gpsAddress
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // del
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // open
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // music
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // notice
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // playMinute
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // playMusic
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // playType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // repeatInfo
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // repeatType
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // shake
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // skip
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // surpervise
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25), // syncTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // title
            cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27) // uptTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlarmId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlarmTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAlarmUuid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBackgroundUri(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClockType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setSetTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setAdvanceOrder(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDes(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGpsAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDel(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setOpen(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setMusic(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNotice(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPlayMinute(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setPlayMusic(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPlayType(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setRepeatInfo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRepeatType(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setShake(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setSkip(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setSurpervise(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSyncTime(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
        entity.setTitle(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUptTime(cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tasks" to-many relationship of Alarm. */
    public List<Task> _queryAlarm_Tasks(Long alarmId) {
        synchronized (this) {
            if (alarm_TasksQuery == null) {
                QueryBuilder<Task> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AlarmId.eq(null));
                alarm_TasksQuery = queryBuilder.build();
            }
        }
        Query<Task> query = alarm_TasksQuery.forCurrentThread();
        query.setParameter(0, alarmId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAlarmDao().getAllColumns());
            builder.append(" FROM TASK T");
            builder.append(" LEFT JOIN ALARM T0 ON T.'ALARM_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Task loadCurrentDeep(Cursor cursor, boolean lock) {
        Task entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Alarm alarm = loadCurrentOther(daoSession.getAlarmDao(), cursor, offset);
        entity.setAlarm(alarm);

        return entity;    
    }

    public Task loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Task> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Task> list = new ArrayList<Task>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Task> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Task> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
