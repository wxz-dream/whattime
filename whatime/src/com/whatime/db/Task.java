package com.whatime.db;

import com.alibaba.fastjson.annotation.JSONField;
import com.whatime.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TASK.
 */
public class Task {
    @JSONField (serialize= false)
    private Long id;
    private String uuid;
    private Long alarmId;
    private String address;
    private Long alarmTime;
    private String alarmUuid;
    private String backgroundUri;
    private Integer clockType;
    private Long createTime;
    private Long setTime;
    private Integer advanceOrder;
    private String des;
    private String gpsAddress;
    private Boolean del;
    private Boolean open;
    private String music;
    private String notice;
    private Integer playMinute;
    private String playMusic;
    private Integer playType;
    private String repeatInfo;
    private Integer repeatType;
    private Boolean shake;
    private Boolean skip;
    private String surpervise;
    private Long syncTime;
    private String title;
    private Long uptTime;

    /** Used to resolve relations */
    @JSONField (serialize= false)
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @JSONField (serialize= false)
    private transient TaskDao myDao;
    @JSONField (serialize= false)
    private Alarm alarm;
    @JSONField (serialize= false)
    private Long alarm__resolvedKey;


    public Task() {
    }

    public Task(Long id) {
        this.id = id;
    }

    public Task(Long id, String uuid, Long alarmId, String address, Long alarmTime, String alarmUuid, String backgroundUri, Integer clockType, Long createTime, Long setTime, Integer advanceOrder, String des, String gpsAddress, Boolean del, Boolean open, String music, String notice, Integer playMinute, String playMusic, Integer playType, String repeatInfo, Integer repeatType, Boolean shake, Boolean skip, String surpervise, Long syncTime, String title, Long uptTime) {
        this.id = id;
        this.uuid = uuid;
        this.alarmId = alarmId;
        this.address = address;
        this.alarmTime = alarmTime;
        this.alarmUuid = alarmUuid;
        this.backgroundUri = backgroundUri;
        this.clockType = clockType;
        this.createTime = createTime;
        this.setTime = setTime;
        this.advanceOrder = advanceOrder;
        this.des = des;
        this.gpsAddress = gpsAddress;
        this.del = del;
        this.open = open;
        this.music = music;
        this.notice = notice;
        this.playMinute = playMinute;
        this.playMusic = playMusic;
        this.playType = playType;
        this.repeatInfo = repeatInfo;
        this.repeatType = repeatType;
        this.shake = shake;
        this.skip = skip;
        this.surpervise = surpervise;
        this.syncTime = syncTime;
        this.title = title;
        this.uptTime = uptTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTaskDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public Long getAlarmId() {
        return alarmId;
    }

    public void setAlarmId(Long alarmId) {
        this.alarmId = alarmId;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Long getAlarmTime() {
        return alarmTime;
    }

    public void setAlarmTime(Long alarmTime) {
        this.alarmTime = alarmTime;
    }

    public String getAlarmUuid() {
        return alarmUuid;
    }

    public void setAlarmUuid(String alarmUuid) {
        this.alarmUuid = alarmUuid;
    }

    public String getBackgroundUri() {
        return backgroundUri;
    }

    public void setBackgroundUri(String backgroundUri) {
        this.backgroundUri = backgroundUri;
    }

    public Integer getClockType() {
        return clockType;
    }

    public void setClockType(Integer clockType) {
        this.clockType = clockType;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Long getSetTime() {
        return setTime;
    }

    public void setSetTime(Long setTime) {
        this.setTime = setTime;
    }

    public Integer getAdvanceOrder() {
        return advanceOrder;
    }

    public void setAdvanceOrder(Integer advanceOrder) {
        this.advanceOrder = advanceOrder;
    }

    public String getDes() {
        return des;
    }

    public void setDes(String des) {
        this.des = des;
    }

    public String getGpsAddress() {
        return gpsAddress;
    }

    public void setGpsAddress(String gpsAddress) {
        this.gpsAddress = gpsAddress;
    }

    public Boolean getDel() {
        return del;
    }

    public void setDel(Boolean del) {
        this.del = del;
    }

    public Boolean getOpen() {
        return open;
    }

    public void setOpen(Boolean open) {
        this.open = open;
    }

    public String getMusic() {
        return music;
    }

    public void setMusic(String music) {
        this.music = music;
    }

    public String getNotice() {
        return notice;
    }

    public void setNotice(String notice) {
        this.notice = notice;
    }

    public Integer getPlayMinute() {
        return playMinute;
    }

    public void setPlayMinute(Integer playMinute) {
        this.playMinute = playMinute;
    }

    public String getPlayMusic() {
        return playMusic;
    }

    public void setPlayMusic(String playMusic) {
        this.playMusic = playMusic;
    }

    public Integer getPlayType() {
        return playType;
    }

    public void setPlayType(Integer playType) {
        this.playType = playType;
    }

    public String getRepeatInfo() {
        return repeatInfo;
    }

    public void setRepeatInfo(String repeatInfo) {
        this.repeatInfo = repeatInfo;
    }

    public Integer getRepeatType() {
        return repeatType;
    }

    public void setRepeatType(Integer repeatType) {
        this.repeatType = repeatType;
    }

    public Boolean getShake() {
        return shake;
    }

    public void setShake(Boolean shake) {
        this.shake = shake;
    }

    public Boolean getSkip() {
        return skip;
    }

    public void setSkip(Boolean skip) {
        this.skip = skip;
    }

    public String getSurpervise() {
        return surpervise;
    }

    public void setSurpervise(String surpervise) {
        this.surpervise = surpervise;
    }

    public Long getSyncTime() {
        return syncTime;
    }

    public void setSyncTime(Long syncTime) {
        this.syncTime = syncTime;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Long getUptTime() {
        return uptTime;
    }

    public void setUptTime(Long uptTime) {
        this.uptTime = uptTime;
    }

    /** To-one relationship, resolved on first access. */
    public Alarm getAlarm() {
        Long __key = this.alarmId;
        if (alarm__resolvedKey == null || !alarm__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AlarmDao targetDao = daoSession.getAlarmDao();
            Alarm alarmNew = targetDao.load(__key);
            synchronized (this) {
                alarm = alarmNew;
            	alarm__resolvedKey = __key;
            }
        }
        return alarm;
    }

    public void setAlarm(Alarm alarm) {
        synchronized (this) {
            this.alarm = alarm;
            alarmId = alarm == null ? null : alarm.getId();
            alarm__resolvedKey = alarmId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
