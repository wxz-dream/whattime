package com.whatime.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.whatime.db.Alarm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALARM.
*/
public class AlarmDao extends AbstractDao<Alarm, Long> {

    public static final String TABLENAME = "ALARM";

    /**
     * Properties of entity Alarm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property AlarmTime = new Property(2, Long.class, "alarmTime", false, "ALARM_TIME");
        public final static Property CateId = new Property(3, Long.class, "cateId", false, "CATE_ID");
        public final static Property CateUuid = new Property(4, String.class, "cateUuid", false, "CATE_UUID");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Des = new Property(6, String.class, "des", false, "DES");
        public final static Property EndTime = new Property(7, Long.class, "endTime", false, "END_TIME");
        public final static Property Froms = new Property(8, Integer.class, "froms", false, "FROMS");
        public final static Property Del = new Property(9, Boolean.class, "del", false, "DEL");
        public final static Property EndJoin = new Property(10, Boolean.class, "endJoin", false, "END_JOIN");
        public final static Property Open = new Property(11, Boolean.class, "open", false, "OPEN");
        public final static Property JoinNum = new Property(12, Long.class, "joinNum", false, "JOIN_NUM");
        public final static Property Linkman = new Property(13, String.class, "linkman", false, "LINKMAN");
        public final static Property MaxJoinNum = new Property(14, Long.class, "maxJoinNum", false, "MAX_JOIN_NUM");
        public final static Property Scope = new Property(15, String.class, "scope", false, "SCOPE");
        public final static Property Share = new Property(16, String.class, "share", false, "SHARE");
        public final static Property SyncTime = new Property(17, Long.class, "syncTime", false, "SYNC_TIME");
        public final static Property TaskId = new Property(18, Long.class, "taskId", false, "TASK_ID");
        public final static Property TaskUuid = new Property(19, String.class, "taskUuid", false, "TASK_UUID");
        public final static Property Title = new Property(20, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(21, Integer.class, "type", false, "TYPE");
        public final static Property UptTime = new Property(22, Long.class, "uptTime", false, "UPT_TIME");
        public final static Property UserUuid = new Property(23, String.class, "userUuid", false, "USER_UUID");
    };

    private DaoSession daoSession;


    public AlarmDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALARM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'UUID' TEXT," + // 1: uuid
                "'ALARM_TIME' INTEGER," + // 2: alarmTime
                "'CATE_ID' INTEGER," + // 3: cateId
                "'CATE_UUID' TEXT," + // 4: cateUuid
                "'CREATE_TIME' INTEGER," + // 5: createTime
                "'DES' TEXT," + // 6: des
                "'END_TIME' INTEGER," + // 7: endTime
                "'FROMS' INTEGER," + // 8: froms
                "'DEL' INTEGER," + // 9: del
                "'END_JOIN' INTEGER," + // 10: endJoin
                "'OPEN' INTEGER," + // 11: open
                "'JOIN_NUM' INTEGER," + // 12: joinNum
                "'LINKMAN' TEXT," + // 13: linkman
                "'MAX_JOIN_NUM' INTEGER," + // 14: maxJoinNum
                "'SCOPE' TEXT," + // 15: scope
                "'SHARE' TEXT," + // 16: share
                "'SYNC_TIME' INTEGER," + // 17: syncTime
                "'TASK_ID' INTEGER," + // 18: taskId
                "'TASK_UUID' TEXT," + // 19: taskUuid
                "'TITLE' TEXT," + // 20: title
                "'TYPE' INTEGER," + // 21: type
                "'UPT_TIME' INTEGER," + // 22: uptTime
                "'USER_UUID' TEXT);"); // 23: userUuid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALARM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Alarm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        Long alarmTime = entity.getAlarmTime();
        if (alarmTime != null) {
            stmt.bindLong(3, alarmTime);
        }
 
        Long cateId = entity.getCateId();
        if (cateId != null) {
            stmt.bindLong(4, cateId);
        }
 
        String cateUuid = entity.getCateUuid();
        if (cateUuid != null) {
            stmt.bindString(5, cateUuid);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(7, des);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(8, endTime);
        }
 
        Integer froms = entity.getFroms();
        if (froms != null) {
            stmt.bindLong(9, froms);
        }
 
        Boolean del = entity.getDel();
        if (del != null) {
            stmt.bindLong(10, del ? 1l: 0l);
        }
 
        Boolean endJoin = entity.getEndJoin();
        if (endJoin != null) {
            stmt.bindLong(11, endJoin ? 1l: 0l);
        }
 
        Boolean open = entity.getOpen();
        if (open != null) {
            stmt.bindLong(12, open ? 1l: 0l);
        }
 
        Long joinNum = entity.getJoinNum();
        if (joinNum != null) {
            stmt.bindLong(13, joinNum);
        }
 
        String linkman = entity.getLinkman();
        if (linkman != null) {
            stmt.bindString(14, linkman);
        }
 
        Long maxJoinNum = entity.getMaxJoinNum();
        if (maxJoinNum != null) {
            stmt.bindLong(15, maxJoinNum);
        }
 
        String scope = entity.getScope();
        if (scope != null) {
            stmt.bindString(16, scope);
        }
 
        String share = entity.getShare();
        if (share != null) {
            stmt.bindString(17, share);
        }
 
        Long syncTime = entity.getSyncTime();
        if (syncTime != null) {
            stmt.bindLong(18, syncTime);
        }
 
        Long taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindLong(19, taskId);
        }
 
        String taskUuid = entity.getTaskUuid();
        if (taskUuid != null) {
            stmt.bindString(20, taskUuid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(21, title);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(22, type);
        }
 
        Long uptTime = entity.getUptTime();
        if (uptTime != null) {
            stmt.bindLong(23, uptTime);
        }
 
        String userUuid = entity.getUserUuid();
        if (userUuid != null) {
            stmt.bindString(24, userUuid);
        }
    }

    @Override
    protected void attachEntity(Alarm entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Alarm readEntity(Cursor cursor, int offset) {
        Alarm entity = new Alarm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // alarmTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cateId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cateUuid
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // des
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // endTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // froms
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // del
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // endJoin
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // open
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // joinNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // linkman
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // maxJoinNum
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // scope
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // share
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // syncTime
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // taskId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // taskUuid
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // title
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // type
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // uptTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // userUuid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Alarm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlarmTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCateId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCateUuid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDes(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setFroms(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDel(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setEndJoin(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setOpen(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setJoinNum(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setLinkman(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMaxJoinNum(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setScope(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShare(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSyncTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setTaskId(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setTaskUuid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTitle(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setType(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setUptTime(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setUserUuid(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Alarm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Alarm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTaskDao().getAllColumns());
            builder.append(" FROM ALARM T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.'CATE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN TASK T1 ON T.'TASK_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Alarm loadCurrentDeep(Cursor cursor, boolean lock) {
        Alarm entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        Task task = loadCurrentOther(daoSession.getTaskDao(), cursor, offset);
        entity.setTask(task);

        return entity;    
    }

    public Alarm loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Alarm> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Alarm> list = new ArrayList<Alarm>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Alarm> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Alarm> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
